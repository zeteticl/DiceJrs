<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'retCode' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>29</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'db' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>26</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'getInstance()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'allocator&lt;char&gt; &gt;()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'allocator&lt;char&gt; &gt;()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>27</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'registerTable()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>29</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'operator new()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>nameGetter::{ctor}</FUNCTION>
    <DECORATED>??0nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>24</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>39</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class nameGetter', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>nameGetter::{dtor}</FUNCTION>
    <DECORATED>??1nameGetter@@QAE@XZ</DECORATED>
    <FUNCLINE>39</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>51</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'iter' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>nameGetter::getNickName</FUNCTION>
    <DECORATED>?getNickName@nameGetter@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J0@Z</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>112</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'iter' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>nameGetter::setNickName</FUNCTION>
    <DECORATED>?setNickName@nameGetter@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J1@Z</DECORATED>
    <FUNCLINE>99</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>131</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>nameGetter::setNickName</FUNCTION>
    <DECORATED>?setNickName@nameGetter@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J1@Z</DECORATED>
    <FUNCLINE>99</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>139</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>nameGetter::setNickName</FUNCTION>
    <DECORATED>?setNickName@nameGetter@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J1@Z</DECORATED>
    <FUNCLINE>99</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>149</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>nameGetter::setNickName</FUNCTION>
    <DECORATED>?setNickName@nameGetter@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J1@Z</DECORATED>
    <FUNCLINE>99</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>109</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26444</DEFECTCODE>
    <DESCRIPTION>Avoid unnamed objects with custom construction and destruction (es.84).</DESCRIPTION>
    <FUNCTION>nameGetter::setNickName</FUNCTION>
    <DECORATED>?setNickName@nameGetter@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J1@Z</DECORATED>
    <FUNCLINE>99</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 'argv' for function 'nameGetter::sqlite3_callback_query_name' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>169</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'pstr_ret' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'argv' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>169</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26493</DEFECTCODE>
    <DESCRIPTION>Don't use C-style casts (type.4).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>170</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26486</DEFECTCODE>
    <DESCRIPTION>Don't pass a pointer that may be invalid to a function. Parameter 0 '(*argv)' in call to 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;' may be invalid (lifetime.3).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
        <FILENAME>namegetter.cpp</FILENAME>
        <LINE>166</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26487</DEFECTCODE>
    <DESCRIPTION>Don't return a pointer '(*argv)' that may be invalid (lifetime.4).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
        <FILENAME>namegetter.cpp</FILENAME>
        <LINE>166</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>166</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>26487</DEFECTCODE>
    <DESCRIPTION>Don't return a pointer '(*azColName)' that may be invalid (lifetime.4).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
        <FILENAME>namegetter.cpp</FILENAME>
        <LINE>166</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>170</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>nameGetter::sqlite3_callback_query_name</FUNCTION>
    <DECORATED>?sqlite3_callback_query_name@nameGetter@@CAHPAXHPAPAD1@Z</DECORATED>
    <FUNCLINE>166</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>199</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26444</DEFECTCODE>
    <DESCRIPTION>Avoid unnamed objects with custom construction and destruction (es.84).</DESCRIPTION>
    <FUNCTION>nameGetter::getDefaultName</FUNCTION>
    <DECORATED>?getDefaultName@nameGetter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J0@Z</DECORATED>
    <FUNCLINE>175</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>192</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26444</DEFECTCODE>
    <DESCRIPTION>Avoid unnamed objects with custom construction and destruction (es.84).</DESCRIPTION>
    <FUNCTION>nameGetter::getDefaultName</FUNCTION>
    <DECORATED>?getDefaultName@nameGetter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J0@Z</DECORATED>
    <FUNCLINE>175</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>186</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>26444</DEFECTCODE>
    <DESCRIPTION>Avoid unnamed objects with custom construction and destruction (es.84).</DESCRIPTION>
    <FUNCTION>nameGetter::getDefaultName</FUNCTION>
    <DECORATED>?getDefaultName@nameGetter@@AAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_J0@Z</DECORATED>
    <FUNCLINE>175</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>211</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>nameGetter::strip</FUNCTION>
    <DECORATED>?strip@nameGetter@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z</DECORATED>
    <FUNCLINE>205</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\sb6ku\desktop\jrs_dev\dicejrs</FILEPATH>
      <FILENAME>namegetter.cpp</FILENAME>
      <LINE>211</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>nameGetter::strip</FUNCTION>
    <DECORATED>?strip@nameGetter@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z</DECORATED>
    <FUNCLINE>205</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>