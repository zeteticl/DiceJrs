{
  "version": "2.0.0",
  "$schema": "http://json.schemastore.org/sarif-2.0.0",
  "runs": [
    {
      "results": [
        {
          "ruleId": "26486",
          "message": {
            "text": "Don't pass a pointer that may be invalid to a function. Parameter 0 '(temporary 2)' in call to 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=' may be invalid (lifetime.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 4,
                  "endLine": 26,
                  "endColumn": 39
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::analyze(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "step": 0,
                      "location": {
                        "physicalLocation": {
                          "fileLocation": {
                            "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                          },
                          "region": {
                            "startLine": 26,
                            "startColumn": 39
                          }
                        }
                      },
                      "importance": "important"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "26489",
          "message": {
            "text": "Don't dereference a pointer that may be invalid: '*<begin>$L0'. '<begin>$L0' may have been invalidated at line 30 (lifetime.1)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "endLine": 30,
                  "endColumn": 26
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::analyze(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "step": 0,
                      "location": {
                        "physicalLocation": {
                          "fileLocation": {
                            "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                          },
                          "region": {
                            "startLine": 30,
                            "startColumn": 26
                          }
                        }
                      },
                      "importance": "important"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "26486",
          "message": {
            "text": "Don't pass a pointer that may be invalid to a function. Parameter 0 '(temporary 3)' in call to 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=' may be invalid (lifetime.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "endLine": 37,
                  "endColumn": 40
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::analyze(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "step": 0,
                      "location": {
                        "physicalLocation": {
                          "fileLocation": {
                            "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                          },
                          "region": {
                            "startLine": 37,
                            "startColumn": 40
                          }
                        }
                      },
                      "importance": "important"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "26486",
          "message": {
            "text": "Don't pass a pointer that may be invalid to a function. Parameter 0 '(temporary 5)' in call to 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=' may be invalid (lifetime.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 40
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::analyze(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "step": 0,
                      "location": {
                        "physicalLocation": {
                          "fileLocation": {
                            "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                          },
                          "region": {
                            "startLine": 43,
                            "startColumn": 40
                          }
                        }
                      },
                      "importance": "important"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 19
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::get(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ]
        },
        {
          "ruleId": "26400",
          "message": {
            "text": "Do not assign the result of an allocation or a function call with an owner<T> return value to a raw pointer, use owner<T> instead (i.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 19,
                  "endLine": 61,
                  "endColumn": 19
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::get(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ]
        },
        {
          "ruleId": "26401",
          "message": {
            "text": "Do not delete a raw pointer that is not an owner<T> (i.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 12
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::get(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ]
        },
        {
          "ruleId": "26409",
          "message": {
            "text": "Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 12
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::get(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ]
        },
        {
          "ruleId": "26486",
          "message": {
            "text": "Don't pass a pointer that may be invalid to a function. Parameter 1 '(temporary 13)' in call to 'std::operator==<char,std::char_traits<char>,std::allocator<char> >' may be invalid (lifetime.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 7,
                  "endLine": 71,
                  "endColumn": 47
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::get(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "step": 0,
                      "location": {
                        "physicalLocation": {
                          "fileLocation": {
                            "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                          },
                          "region": {
                            "startLine": 71,
                            "startColumn": 47
                          }
                        }
                      },
                      "importance": "important"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "26486",
          "message": {
            "text": "Don't pass a pointer that may be invalid to a function. Parameter 0 '(temporary 14)' in call to 'std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=' may be invalid (lifetime.3)."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 4,
                  "endLine": 73,
                  "endColumn": 37
                }
              },
              "fullyQualifiedLogicalName": "bool __cdecl GetRule::get(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)"
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "step": 0,
                      "location": {
                        "physicalLocation": {
                          "fileLocation": {
                            "uri": "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp"
                          },
                          "region": {
                            "startLine": 73,
                            "startColumn": 37
                          }
                        }
                      },
                      "importance": "important"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "tool": {
        "name": "PREfast",
        "fullName": "PREfast Code Analysis",
        "version": "14.20.27305.0",
        "fileVersion": "14.00.27305.00"
      },
      "invocations": [
        {
          "commandLine": "\"C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27305\\bin\\HostX86\\x86\\c1xx.dll\" -ACf{1F7B090C-16DB-4822-966A-A93D26ED4681} -ACpmspft140.dll -Alint -D_PREFAST_ -D_AST_FE_ -Analyze -zm0x00162090 -il C:\\Users\\sb6ku\\AppData\\Local\\Temp\\_CL_abef4d7east -typedil -f GetRule.cpp -Ze -D_MSC_EXTENSIONS -Zp8 -ZB64 -D_INTEGRAL_MAX_BITS=64 -Gs -pc \\:/ -D_MSC_VER=1920 -D_MSC_FULL_VER=192027305 -D_MSC_BUILD=0 -D_WIN32 -D_M_IX86=600 -D_M_IX86_FP=2 -GR -D_CPPRTTI -I C:\\Users\\sb6ku\\Desktop\\Jrs_Dev\\CQSDK -nologo -W 0 -diagnostics:column- -diagnostics:caret- -D_GUARDOVERFLOW_CRT_ALLOCATORS=1 -GF -Og -Oi -Ot -Oy -ltcg -DCODE_ANALYSIS -DWIN32 -DNDEBUG -DDICE_EXPORTS -D_WINDOWS -D_USRDLL -D_WINDLL -D_MBCS -EHs -D_CPPUNWIND -EHc -clrNoPureCRT -D_MT -GS -D_M_FP_PRECISE -permissive- -Zc:wchar_t -Zc:forScope -FoRelease\\GetRule.obj -FdRelease\\vc142.pdb -Gd -analyze:quiet -analyze:plugin C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27305\\bin\\HostX86\\x86\\EspXEngine.dll -FC -errorreport:prompt -analyze:ruleset C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\Team Tools\\Static Analysis Tools\\Rule Sets\\AllRules.ruleset -analyze:projectdirectory C:\\Users\\sb6ku\\Desktop\\Jrs_Dev\\DiceJrs -analyze:rulesetdirectory ;C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\Team Tools\\Static Analysis Tools\\\\Rule Sets -I C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27305\\include -I C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27305\\atlmfc\\include -I C:\\Program Files\\Microsoft Visual Studio\\2019\\Preview\\VC\\Auxiliary\\VS\\include -I C:\\Program Files\\Windows Kits\\10\\Include\\10.0.17763.0\\ucrt -I C:\\Program Files\\Windows Kits\\10\\Include\\10.0.17763.0\\um -I C:\\Program Files\\Windows Kits\\10\\Include\\10.0.17763.0\\shared -I C:\\Program Files\\Windows Kits\\10\\Include\\10.0.17763.0\\winrt -I C:\\Program Files\\Windows Kits\\10\\Include\\10.0.17763.0\\cppwinrt -I C:\\Program Files\\Windows Kits\\NETFXSDK\\4.7.2\\Include\\um"
        }
      ],
      "files": {
        "file:///c:/users/sb6ku/desktop/jrs_dev/cqsdk/bufstream.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.cpp": {
          "roles": [
            "analysisTarget",
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/cqsdk/cqlogger.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/getrule.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/cqsdk/cqapi_ex.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/globalvar.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/encodingconvert.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/cqsdk/cqdefine.h": {
          "roles": [
            "resultFile"
          ]
        },
        "file:///c:/users/sb6ku/desktop/jrs_dev/dicejrs/dicenetwork.h": {
          "roles": [
            "resultFile"
          ]
        }
      },
      "logicalLocations": {},
      "resources": {
        "rules": {}
      }
    }
  ]
}